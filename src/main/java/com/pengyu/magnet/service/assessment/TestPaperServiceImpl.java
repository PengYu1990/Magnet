package com.pengyu.magnet.service.assessment;

import com.pengyu.magnet.domain.Company;
import com.pengyu.magnet.domain.Job;
import com.pengyu.magnet.domain.User;
import com.pengyu.magnet.domain.assessment.Question;
import com.pengyu.magnet.domain.assessment.TestPaper;
import com.pengyu.magnet.dto.JobResponse;
import com.pengyu.magnet.dto.TestPaperDTO;
import com.pengyu.magnet.exception.ResourceNotFoundException;
import com.pengyu.magnet.mapper.TestPaperMapper;
import com.pengyu.magnet.repository.CompanyRepository;
import com.pengyu.magnet.repository.JobRepository;
import com.pengyu.magnet.repository.UserRepository;
import com.pengyu.magnet.repository.assessment.QuestionRepository;
import com.pengyu.magnet.repository.assessment.TestPaperRepository;
import com.pengyu.magnet.service.assessment.TestPaperService;
import com.pengyu.magnet.service.compnay.JobService;
import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;

/**
 * Test Paper Service, operate TestPaper object which will be generated by AI
 */
@Service
@AllArgsConstructor
public class TestPaperServiceImpl implements TestPaperService {

    private final TestPaperRepository testPaperRepository;
    private final UserRepository userRepository;
    private final JobRepository jobRepository;
    private final CompanyRepository companyRepository;

    private final QuestionRepository questionRepository;

    private final JobService jobService;

    /**
     * Create
     * @param testPaperDTO
     * @return
     */
    @Override
    public TestPaperDTO save(TestPaperDTO testPaperDTO) {
        // If edit
        if(testPaperDTO.getJob() != null) {
            testPaperDTO.setJobId(testPaperDTO.getJob().getId());
        }

        // Map testPaperDTO tp testPaper
        TestPaper testPaper = TestPaperMapper.INSTANCE.mapTestPaperDTOToTestPaper(testPaperDTO);

        // Find Job
        Job job = jobRepository
                .findById(testPaperDTO.getJobId())
                .orElseThrow(()->new ResourceNotFoundException("No job find with id " + testPaperDTO.getJobId()));
        testPaper.setJob(job);

        // Find User
        testPaper.setUser(job.getCompany().getUser());

        // Set Create Time
        testPaper.setCreatedAt(LocalDateTime.now());

        // Bind TestPaper for every Question
        for(Question question : testPaper.getQuestionList()) {
            question.setTestPaper(testPaper);
            // Bind Question for every option
            if(question.getOptionList() != null)
                question.getOptionList().forEach(optionAnswer -> optionAnswer.setQuestion(question));
        }

        TestPaperDTO testPaperDTONew = TestPaperMapper.INSTANCE.mapTestPaperToTestPaperDTO(testPaperRepository.save(testPaper));
        testPaperDTONew.setJobId(job.getId());

        return testPaperDTONew;
    }

    /**
     * Find one
     * @param id
     * @return
     */
    @Override
    public TestPaperDTO find(Long id) {
        return TestPaperMapper.INSTANCE.mapTestPaperToTestPaperDTO(testPaperRepository
                .findById(id)
                .orElseThrow(()->new ResourceNotFoundException("No such test paper with id "+id)));
    }

    /**
     * Find All owned by current user
     * @param pageable
     * @return
     */
    @Override
    public List<TestPaperDTO> findAll(Pageable pageable, Long userId) {

        // If userId is not null, fetch by currentUser
        if(userId != null) {
            // Get Current login user
            User user = getCurrentUser();

            return testPaperRepository
                    .findAllByUser(pageable, user)
                    .map(testPaper -> TestPaperMapper.INSTANCE.mapTestPaperToTestPaperDTO(testPaper))
                    .toList();
        }

        return testPaperRepository
                .findAll(pageable)
                .map(testPaper -> TestPaperMapper.INSTANCE.mapTestPaperToTestPaperDTO(testPaper))
                .toList();
    }

    private User getCurrentUser() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String email = authentication.getName();
        User user = userRepository.findByEmail(email);
        return user;
    }

    private Company getCurrentCompany() {
        User currentUser = getCurrentUser();
        return companyRepository
                .findByUserId(currentUser.getId())
                .orElseThrow(() -> new ResourceNotFoundException("No such company found with user id "+ currentUser.getId()));

    }

    @Override
    public long count(Long userId) {
        if(userId != null){
            return testPaperRepository.countByUserId(userId);
        }
        return testPaperRepository.count();
    }

    @Override
    public Page<TestPaperDTO> findAllByCurrentCompany(Pageable pageable) {
        return testPaperRepository
                .findAllByUser(pageable, getCurrentUser())
                .map(testPaper -> matTestPaperToTestPaperDTO(testPaper));
    }

    @Override
    @Transactional
    public void deleteQuestion(Long testPaperId, Long questionId) {
        TestPaper testPaper = testPaperRepository
                .findById(testPaperId)
                .orElseThrow(() -> new ResourceNotFoundException("No such Test Paper found with id " + testPaperId));

        for (Question question : testPaper.getQuestionList()) {
            if(question.getId() == questionId) {
                testPaper.getQuestionList().remove(question);
                questionRepository.delete(question);
            }
        }
        testPaperRepository.save(testPaper);
    }

    private TestPaperDTO matTestPaperToTestPaperDTO(TestPaper testPaper) {
        TestPaperDTO testPaperDTO = TestPaperMapper.INSTANCE.mapTestPaperToTestPaperDTO(testPaper);
        JobResponse jobResponse = jobService.find(testPaper.getJob().getId());
        testPaperDTO.setJob(jobResponse);
        return testPaperDTO;
    }
}
